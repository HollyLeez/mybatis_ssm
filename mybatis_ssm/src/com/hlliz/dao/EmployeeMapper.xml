<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hlliz.dao.EmployeeMapper">
    <!--配置二级缓存
    eviction：回收策略
    flushInterval：缓存刷新间隔，多长时间清空一次，默认不清空，可以设置毫秒值
    readOnly：缓存是否只读，true/false，默认从缓存中获取的数据都是只读的，不会修改数据，会将缓存中的引用直接交给用户。不安全，速度快。
               非只读，会使用序列化与反序列化的技术克隆一份新的数据给用户，安全，速度稍慢
    size：缓存中存放多少个元素
    type：指定自定义的缓存全类名，实现Cache接口即可
    -->
    <cache></cache>
    <!--<cache eviction="" flushInterval="60000" readOnly="" size="" type=""></cache>-->
    <!--namespace命名空间，指定为接口的全类名-->
    <select id="getEmployeeById" resultType="emp">
        select * from tbl_employee where id = #{id}
    </select>

    <!--增加操作后，获取自增主键的值，jdbc使用statement.getGenreatedlKeys()方法获取，
        mybatis原理相同，在标签上设置useGeneratedKeys="true"，keyProperty获取到自增主键值后封装给哪个属性-->
    <insert id="addEmp" useGeneratedKeys="true" keyProperty="id">
        insert into tbl_employee(last_name,gender,email) values(#{lastName},#{gender},#{email})
    </insert>

    <update id="updateEmp">
        update tbl_employee set last_name=#{lastName},gender=#{gender},email=#{email} where id=#{id}
    </update>

    <delete id="deleteEmp">
        delete from tbl_employee where id=#{id}
    </delete>

    <select id="getByIdAndLastName" resultType="emp">
        select * from tbl_employee where id=#{id} and last_name=#{lastName}
    </select>

    <select id="getEmployeeByMap" resultType="emp">
        select * from tbl_employee where id=#{id} and last_name=#{lastName}
    </select>
    <!--如果返回的是一个集合，resultType要写集合中元素的类型-->
    <select id="getEmployeeList" resultType="emp">
        select * from tbl_employee
    </select>

    <select id="getEmpMapById" resultType="map">
        select * from tbl_employee where id = #{id}
    </select>

    <select id="getEmpMap" resultType="com.hlliz.bean.Employee">
        select * from tbl_employee
    </select>
</mapper>